service: auth

custom:
  secrets: ${file(donotinclude.json)}

plugins:
  - serverless-pg-migrations

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DB_HOST: ${self:custom.secrets.DB_HOST}
    DB_NAME: ${self:custom.secrets.DB_NAME}
    DB_USER: ${self:custom.secrets.DB_USER}
    DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"

functions:
  verifyToken:
    handler: src/handlers/VerifyToken.auth

  login:
    handler: src/handlers/AuthHandler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: src/handlers/AuthHandler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  me:
    handler: src/handlers/AuthHandler.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer: verifyToken

  getUsers:
    handler: src/handlers/UserHandler.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true

  up:
    handler: src/database/migrations.up
    timeout: 30
    environment:
      DATABASE_URL: postgres://${self:custom.secrets.DB_USER}:${self:custom.secrets.DB_PASSWORD}@${self:custom.secrets.DB_HOST}:5432/${self:custom.secrets.DB_NAME}

  down:
    handler: src/database/migrations.down
    timeout: 30
    environment:
      DATABASE_URL: postgres://${self:custom.secrets.DB_USER}:${self:custom.secrets.DB_PASSWORD}@${self:custom.secrets.DB_HOST}:5432/${self:custom.secrets.DB_NAME}